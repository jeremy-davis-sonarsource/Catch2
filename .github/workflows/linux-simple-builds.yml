name: Linux builds (basic)

on: [push, pull_request]

jobs:
  build:
    name: ${{matrix.cxx}}, C++${{matrix.std}}, ${{matrix.build_type}}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        cxx:
          - g++-9
          - g++-10
          - clang++-9
          - clang++-10
        build_type: [Debug, Release]
        std: [14]
        include:
        # cannot be installed on ubuntu-20.04 be default?
          - cxx: g++-9
            other_pkgs: g++-9
          - cxx: g++-10
            other_pkgs: g++-10
          - cxx: clang++-9
            other_pkgs: clang-9
          - cxx: clang++-10
            other_pkgs: clang-10
          - cxx: clang++-10
            build_type: Debug
            std: 17
            other_pkgs: clang-10
          - cxx: clang++-10
            build_type: Release
            std: 17
            other_pkgs: clang-10

    steps:
    - uses: actions/checkout@v2

    - name: Prepare environment
      run: sudo apt-get install -y ninja-build ${{matrix.other_pkgs}}

    - name: Configure build
      working-directory: ${{runner.workspace}}
      env:
        CXX: ${{matrix.cxx}}
        CXXFLAGS: ${{matrix.cxxflags}}
      # Note: $GITHUB_WORKSPACE is distinct from ${{runner.workspace}}.
      #       This is important
      shell: bash
      run: |
        cmake -Bbuild -H$GITHUB_WORKSPACE \
              -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
              -DCMAKE_CXX_STANDARD=${{matrix.std}} \
              -DCMAKE_CXX_EXTENSIONS=OFF \
              -DCATCH_DEVELOPMENT_BUILD=ON \
              -G Ninja


#     - name: Install Build Wrapper
#       shell: bash
#       run: |
#         curl -L -O https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
#         unzip -o build-wrapper-linux-x86.zip
          
    - name: Build tests + lib
      working-directory: ${{runner.workspace}}/build
      run: |
        curl -L -O https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip -o build-wrapper-linux-x86.zip
        build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ${{runner.workspace}}/cfamily-output ninja
    
    - name: Install Sonar Scanner
      working-directory:
      shell: bash
      run: |
        pwd
        curl -L -O https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
        unzip sonar-scanner-cli-4.4.0.2170-linux.zip
        
    - name: Cache Sonar Scanner cache
      uses: actions/cache@v2
      with:
        key: catch2-cache-${{matrix.cxx}}-${{matrix.std}}-${{matrix.build_type}}
        path: sonar-cache

    - name: Scan with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      shell: bash
      run: sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner -Dsonar.branch.name=devel -Dsonar.cfamily.build-wrapper-output=${{runner.workspace}}/cfamily-output
          

    - name: Run tests
      env:
          CTEST_OUTPUT_ON_FAILURE: 1
      working-directory: ${{runner.workspace}}/build
      # Hardcode 2 cores we know are there
      run: ctest -C ${{matrix.build_type}} -j 2
